google {
    lifeSciences.bootDiskSize = 10.GB
    lifeSciences.preemptible = true
    zone = 'us-east1-b'
    network = 'jax-poc-lifebit-01-vpc-network'
    subnetwork = 'us-east1-sub2'
}

docker.enabled = true

executor {
    name = 'google-lifesciences'
}

params {
    // Max resources
    max_memory     = 100.GB
    max_cpus       = 16
    
    // disk-space allocations for stringtie_merge and rmats
    // this default size is based on 100 samples
    gc_disk_size = "200 GB"
}

process {
    // this 'disk' will have less priority over 'disk' inside withName scope.
    // as we providing individual wintName scope this will no more in use.
    //disk = "200 GB"
    maxRetries = 5
    errorStrategy = { task.attempt == process.maxRetries ? 'ignore' : task.exitStatus in [3,14,143,137,104,134,139] ? 'retry' : 'ignore' }
    container  = 'gcr.io/nextflow-250616/splicing-pipelines-nf:gawk'
    withName: 'get_accession' {
        disk = "50 GB"
        cpus = {check_max(8 * task.attempt, 'cpus')}
        memory = {check_max(30.GB * task.attempt, 'memory')}
    }
    withName: 'get_tcga_bams' {
        disk = "50 GB"
        cpus = {check_max(2 * task.attempt, 'cpus')}
        memory = {check_max(2.GB * task.attempt, 'memory')}
    }
    withName: 'bamtofastq' {
        disk = "200 GB"
        cpus = {check_max(16 * task.attempt, 'cpus')}
        memory = {check_max(60.GB * task.attempt, 'memory')}
    }
    withName: 'fastqc' {
        disk = "50 GB"
        cpus = {check_max(2 * task.attempt, 'cpus')}
        memory = {check_max(2.GB * task.attempt, 'memory')}
    }
    withName: 'trimmomatic' {
        disk = "50 GB"
        cpus = {check_max(2 * task.attempt, 'cpus')}
        memory = {check_max(2.GB * task.attempt, 'memory')}
    }
    withName: 'fastqc_trimmed' {
        disk = "50 GB"
        cpus = {check_max(2 * task.attempt, 'cpus')}
        memory = {check_max(2.GB * task.attempt, 'memory')}
    }
    withName: 'star' {
        disk = "350 GB"
        cpus = { check_max (16 * task.attempt, 'cpus')}
        memory = { check_max( 60.GB * task.attempt, 'memory' ) }
    }
    withName: 'stringtie' {
        disk = "50 GB"
        cpus = {check_max(4 * task.attempt, 'cpus')}
        memory = {check_max(4.GB * task.attempt, 'memory')}
    }
    withName: 'stringtie_merge' {
        disk = params.gc_disk_size
        cpus = {check_max(8 * task.attempt, 'cpus')}
        memory = {check_max(30.GB * task.attempt, 'memory')}
        container = 'gcr.io/nextflow-250616/splicing-pipelines-nf:gawk'
    }
    withName: 'prep_de' {
        disk = params.gc_disk_size
        cpus = {check_max(8 * task.attempt, 'cpus')}
        memory = {check_max(30.GB * task.attempt, 'memory')}
        container = 'gcr.io/nextflow-250616/splicing-pipelines-nf:gawk'
    }
    withName: 'rmats' {
        disk = params.gc_disk_size
        cpus = { check_max (16 * task.attempt, 'cpus')}
        memory = { check_max( 60.GB * task.attempt, 'memory' ) }
        container = 'gcr.io/nextflow-250616/rmats:4.1.0'
    }
    withName: 'paired_rmats' {
        disk = params.gc_disk_size
        cpus = {check_max(16 * task.attempt, 'cpus')}
        memory = {check_max(60.GB * task.attempt, 'memory')}
        container = 'gcr.io/nextflow-250616/rmats:4.1.0'
    }
    withName: 'multiqc' {
        disk = "10 GB"
        cpus = {check_max(2 * task.attempt, 'cpus')}
        memory = {check_max(2.GB * task.attempt, 'memory')}
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}