google {
    lifeSciences.bootDiskSize = params.gls_boot_disk_size
    lifeSciences.preemptible = params.gls_preemptible
    zone = params.zone
    network = params.network
    subnetwork = params.subnetwork
}

docker.enabled = true

params {

    // Max resources
    max_memory     = 640.GB
    max_cpus       = 80
    
    // disk-space allocations for stringtie_merge and rmats
    // this default size is based on 100 samples
    gc_disk_size = "2000 GB"

    cleanup = false // Don't change, otherwise CloudOS jobs won't be resumable by default even if user wants to.

    executor = 'google-lifesciences'
}

process {
    maxRetries = params.max_retries
    errorStrategy = { task.attempt == process.maxRetries ? 'ignore' : task.exitStatus in [3,9,10,14,143,137,104,134,139] ? 'retry' : 'ignore' }
    withName: 'get_accession' {
        disk = "100 GB"
        cpus = 8
        memory = 32.GB 
    }
    withName: 'get_tcga_bams' {
        disk = "100 GB"
        cpus = 8
        memory = 16.GB
    }
    withName: 'bamtofastq' {
        disk = "200 GB"
        cpus = 16 
        memory = 60.GB 
    }
    withName: 'fastqc' {
        disk = "100 GB"
        cpus = 4 
        memory = 32.GB 
    }
    withName: 'trimmomatic' {
        disk = "100 GB"
        cpus = 4
        memory = 8.GB 
    }
    withName: 'fastqc_trimmed' {
        disk = "100 GB"
        cpus = 4
        memory = 32.GB
    }
    withName: 'star' {
        disk = "1000 GB"
        cpus = 48
        memory = 128.GB
    }
    withName: 'stringtie' {
        disk = "100 GB"
        cpus = 48
        memory = 128.GB
    }
    withName: 'stringtie_merge' {
        disk = params.gc_disk_size
        cpus = 24
        memory = 64.GB
    }
    withName: 'prep_de' {
        disk = params.gc_disk_size
        cpus = 24
        memory = 64.GB
    }
    withName: 'rmats1' {
        disk = "1000 GB"
        cpus = 48
        memory = 128.GB
    }
    withName: 'rmats2' {
        disk = params.gc_disk_size
        cpus = 80
        memory = 640.GB
    }
    withName: 'paired_rmats' {
        disk = params.gc_disk_size
        cpus = 80
        memory = 640.GB
    }
    withName: 'multiqc' {
        disk = "10 GB"
        cpus = 8
        memory = 32.GB
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit

def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
