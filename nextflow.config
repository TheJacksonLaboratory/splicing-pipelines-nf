manifest {
    homePage    = 'https://github.com/TheJacksonLaboratory/splicing-pipelines-nf/'
    description = 'Nextflow Implementation of Anczukow-Lab workflow for alternative splicing processing'
    mainScript  = 'main.nf'
}

params {
    // Input files 
    reads          = false
    bams           = false
    rmats_pairs    = false
    run_name	     = false
    download_from  = false
    manifest       = false
    sra_config_file= "${baseDir}/assets/sra-user-settings.mkfg"
    key_file       = false
    genome_fasta   = false

    // Main arguments: 
    gtf            = false
    assembly_name  = false
    star_index     = false
    singleEnd      = false
    stranded       = 'first-strand'
    strType {
      'first-strand' {
        strType = 2
      }
      'second-strand' {
        strType = 1
      }
    }
    readlength     = false

    // Trimmomatic: 
    minlen         = 20
    slidingwindow  = true
    adapter        = false

    // Star
    overhang       = false
    mismatch       = 2
    filterScore    = 0.66
    sjdbOverhangMin = 3
    star_memory    = false
    soft_clipping = true
    save_unmapped = false

    // rMATS
    statoff        = false
    paired_stats   = false
    novelSS        = false
    mil            = 50
    mel            = 500

    // Other
    test           = false
    skiprMATS      = false
    skipMultiQC    = false
    outdir         = 'results'
    multiqc_config = "$baseDir/examples/assets/multiqc_config.yaml" 
    help           = false
    mega_time      = 20.h
    tracedir = "${params.outdir}/pipeline_info"
    error_strategy = 'finish'
    allowed_error_strategies = ['terminate', 'finish', 'ignore', 'retry']
    cleanup = true  // if true will delete all intermediate files in work folder on workflow completion (not including staged files)

    // Save of .command.* logs
    savescript = 'task_hash=`basename \${PWD} | cut -c1-6`; mkdir command-logs-\$task_hash ; cp .command.*{err,log,sh} command-logs-\$task_hash'

    // Max resources
    max_memory     = 760.GB
    max_cpus       = 72
    max_time       = 72.h
    gc_disk_size   = false //only for google cloud, read docs
    max_retries    = 5
    
    // google life science specific
    debug = false
    gls_boot_disk_size = 50.GB
    gls_preemptible = true
    zone = 'us-east1-b'
    network = 'jax-poc-lifebit-01-vpc-network'
    subnetwork = 'us-east1-sub2'
    
    // process scope options
    echo = false

    config = 'conf/executors/google.config'
}

cleanup = params.cleanup

process {

  errorStrategy = params.error_strategy
  echo = params.echo

  container = 'anczukowlab/splicing-pipelines-nf:3.0'
  withName: 'get_accession' {
    container = 'anczukowlab/download_reads:2.0'
  }
  withName: 'in2csv' {
    container = 'quay.io/lifebitai/csvkit:1.0.5'
  }
  withName: 'filter_manifest' {
    container = 'quay.io/lifebitai/pcgr:python-base_1.0.0'
  }
  withName: 'gen3_drs_fasp' {
    container = 'anczukowlab/lifebit-ai-fasp:v1.1'
  }
  withName: 'get_tcga_bams' {
    container = 'anczukowlab/download_reads:2.0'
  }
  withName: 'bamtofastq' {
    container = 'anczukowlab/download_reads:2.0'
  }
  withName: 'rmats' {
    container = 'anczukowlab/splicing-rmats:4.1.1'
  }
  withName: 'paired_rmats' {
    container = 'anczukowlab/splicing-rmats:4.1.1'
  }
  withName: 'collect_tool_versions_env1' {
    container = 'anczukowlab/splicing-pipelines-nf:3.0'
  }
  withName: 'collect_tool_versions_env2' {
    container = 'anczukowlab/splicing-rmats:4.1.1'
  }
}

profiles {
  standard { includeConfig params.config }
  docker { 
    docker.enabled = true 
  }
  base { includeConfig 'conf/executors/base.config' }
  sumner { 
    includeConfig 'conf/executors/base.config'
    includeConfig 'conf/executors/sumner.config' 
  }
  singularity {
    includeConfig 'conf/executors/singularity.config'
  }
  MYC_MCF10A_0h_vs_MYC_MCF10A_8h { includeConfig 'conf/examples/MYC_MCF10A_0h_vs_MYC_MCF10A_8h.config' }
  ultra_quick_test { includeConfig 'conf/examples/ultra_quick_test.config' }
  sra_test { includeConfig 'conf/examples/sra_test.config' }
  sra_test_paired { includeConfig 'conf/examples/sra_test_paired.config' }
  sra_test_single { includeConfig 'conf/examples/sra_test_single.config' }
}

dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
  fields = 'process,tag,name,status,exit,script'
}
